// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/v1/bid/bid.proto

package bid

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on StringRes with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *StringRes) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Data

	return nil
}

// StringResValidationError is the validation error returned by
// StringRes.Validate if the designated constraints aren't met.
type StringResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringResValidationError) ErrorName() string { return "StringResValidationError" }

// Error satisfies the builtin error interface
func (e StringResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringResValidationError{}

// Validate checks the field values on IdReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *IdReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetCkey()); l < 1 || l > 50 {
		return IdReqValidationError{
			field:  "Ckey",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
	}

	return nil
}

// IdReqValidationError is the validation error returned by IdReq.Validate if
// the designated constraints aren't met.
type IdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdReqValidationError) ErrorName() string { return "IdReqValidationError" }

// Error satisfies the builtin error interface
func (e IdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdReqValidationError{}

// Validate checks the field values on IdRes with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *IdRes) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// IdResValidationError is the validation error returned by IdRes.Validate if
// the designated constraints aren't met.
type IdResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdResValidationError) ErrorName() string { return "IdResValidationError" }

// Error satisfies the builtin error interface
func (e IdResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdResValidationError{}

// Validate checks the field values on AddReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AddReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetCkey()); l < 1 || l > 50 {
		return AddReqValidationError{
			field:  "Ckey",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
	}

	// no validation rules for Type

	if m.GetStep() <= 0 {
		return AddReqValidationError{
			field:  "Step",
			reason: "value must be greater than 0",
		}
	}

	if m.GetMaxid() <= 0 {
		return AddReqValidationError{
			field:  "Maxid",
			reason: "value must be greater than 0",
		}
	}

	if l := utf8.RuneCountInString(m.GetIntro()); l < 1 || l > 50 {
		return AddReqValidationError{
			field:  "Intro",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
	}

	return nil
}

// AddReqValidationError is the validation error returned by AddReq.Validate if
// the designated constraints aren't met.
type AddReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddReqValidationError) ErrorName() string { return "AddReqValidationError" }

// Error satisfies the builtin error interface
func (e AddReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddReqValidationError{}

// Validate checks the field values on AddRes with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AddRes) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// AddResValidationError is the validation error returned by AddRes.Validate if
// the designated constraints aren't met.
type AddResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddResValidationError) ErrorName() string { return "AddResValidationError" }

// Error satisfies the builtin error interface
func (e AddResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddResValidationError{}
