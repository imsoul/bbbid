// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bid

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BidClient is the client API for Bid service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BidClient interface {
	//获取ID
	GetId(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IdRes, error)
	// 添加业务
	AddBiz(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddRes, error)
}

type bidClient struct {
	cc grpc.ClientConnInterface
}

func NewBidClient(cc grpc.ClientConnInterface) BidClient {
	return &bidClient{cc}
}

func (c *bidClient) GetId(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IdRes, error) {
	out := new(IdRes)
	err := c.cc.Invoke(ctx, "/bid.v1.Bid/GetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bidClient) AddBiz(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddRes, error) {
	out := new(AddRes)
	err := c.cc.Invoke(ctx, "/bid.v1.Bid/AddBiz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BidServer is the server API for Bid service.
// All implementations must embed UnimplementedBidServer
// for forward compatibility
type BidServer interface {
	//获取ID
	GetId(context.Context, *IdReq) (*IdRes, error)
	// 添加业务
	AddBiz(context.Context, *AddReq) (*AddRes, error)
	mustEmbedUnimplementedBidServer()
}

// UnimplementedBidServer must be embedded to have forward compatible implementations.
type UnimplementedBidServer struct {
}

func (UnimplementedBidServer) GetId(context.Context, *IdReq) (*IdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetId not implemented")
}
func (UnimplementedBidServer) AddBiz(context.Context, *AddReq) (*AddRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBiz not implemented")
}
func (UnimplementedBidServer) mustEmbedUnimplementedBidServer() {}

// UnsafeBidServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BidServer will
// result in compilation errors.
type UnsafeBidServer interface {
	mustEmbedUnimplementedBidServer()
}

func RegisterBidServer(s grpc.ServiceRegistrar, srv BidServer) {
	s.RegisterService(&Bid_ServiceDesc, srv)
}

func _Bid_GetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidServer).GetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bid.v1.Bid/GetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidServer).GetId(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bid_AddBiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidServer).AddBiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bid.v1.Bid/AddBiz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidServer).AddBiz(ctx, req.(*AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Bid_ServiceDesc is the grpc.ServiceDesc for Bid service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bid_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bid.v1.Bid",
	HandlerType: (*BidServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetId",
			Handler:    _Bid_GetId_Handler,
		},
		{
			MethodName: "AddBiz",
			Handler:    _Bid_AddBiz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/bid/bid.proto",
}
